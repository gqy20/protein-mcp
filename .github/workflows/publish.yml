name: Publish Python Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v1.0.1)'
        required: true
        default: 'v1.0.0'
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run code quality checks
      run: |
        echo "🔍 Running code quality checks before publishing..."
        uv run black --check src/ tests/
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/
        uv run isort --check-only src/ tests/
        uv run mypy src/protein_mcp/

    - name: Run tests
      run: |
        echo "🧪 Running tests before publishing..."
        uv run pytest tests/ -v --cov=src/protein_mcp

    - name: Build package
      run: |
        echo "🏗️ Building package..."
        uv build

        echo "📦 Package information:"
        echo "Source distribution: $(ls dist/*.tar.gz)"
        echo "Wheel distribution: $(ls dist/*.whl)"

        # Show package info
        for wheel in dist/*.whl; do
          if [ -f "$wheel" ]; then
            echo "📦 Testing wheel: $wheel"
            uvx --from "$wheel" protein-mcp --version || echo "Version info not available"
            break
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  publish-to-test-pypi:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'true'

    environment:
      name: test-pypi
      url: https://test.pypi.org/project/protein-mcp/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        echo "🚀 Publishing to Test PyPI..."
        pip install twine
        twine check dist/*
        twine upload --repository-url https://test.pypi.org/legacy/ dist/*

    - name: Test installation from Test PyPI
      run: |
        echo "🧪 Testing installation from Test PyPI..."
        pip install --index-url https://test.pypi.org/simple/ protein-mcp
        protein-mcp --version || echo "Version check failed"

  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    environment:
      name: pypi
      url: https://pypi.org/project/protein-mcp/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        pip install twine
        twine check dist/*

        echo "📦 Publishing packages:"
        ls -la dist/

        twine upload dist/*

    - name: Verify PyPI publication
      run: |
        echo "🔍 Verifying publication on PyPI..."
        sleep 30  # Wait for PyPI to index the package

        # Try to install from PyPI
        pip install protein-mcp
        protein-mcp --version || echo "Version check failed"

  create-github-release:
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-to-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "📋 Generating changelog from $PREVIOUS_TAG to ${{ steps.version.outputs.version }}..."
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          echo "📋 No previous tag found, generating full changelog..."
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi

        # Save changelog to file
        echo "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## 🧬 Protein MCP ${{ steps.version.outputs.version }}

          ### 📦 Installation
          ```bash
          pip install protein-mcp
          ```

          ### 🚀 Quick Start
          ```bash
          protein-mcp --help
          ```

          ### 📋 Changes
          ${{ steps.changelog.outputs.changelog }}

          ### 📚 Documentation
          - [GitHub Repository](${{ github.repository }})
          - [PyPI Package](https://pypi.org/project/protein-mcp/)

          ---
          🤖 _This release was automatically generated_
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  notify-discord:
    runs-on: ubuntu-latest
    needs: [publish-to-pypi, create-github-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Notify Discord (if webhook configured)
      if: env.DISCORD_WEBHOOK_URL != ''
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"embeds\": [{\"title\": \"🧬 Protein MCP Released\", \"description\": \"Version ${{ steps.version.outputs.version }} is now available on PyPI!\n\n**Installation:**\`pip install protein-mcp\`\n\n**Release:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}\", \"color\": 5814783}]}" \
          $DISCORD_WEBHOOK_URL || echo "Discord notification skipped (no webhook configured)"